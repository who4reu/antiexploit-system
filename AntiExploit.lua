-- Server Script

local ServerScriptService = game:GetService("ServerScriptService")
local HttpService = game:GetService("HttpService")
local _Workspace_ = game:GetService("Workspace")
local Lightning = game:GetService("Lighting")
local Players = game:GetService("Players")

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RemoteEvents = ReplicatedStorage:WaitForChild("RemoteEvents")

local BodyParts = {"Left Arm", "Right Arm", "Left Leg", "Right Leg", "Humanoid"}
local WhitelistedStates = {0, 3, 5, 7, 8, 10, 12, 15}

local Webhook = "" -- Current Discord Webhook URL
local Embeddebounce = false

function SendlogToWebhook(Player, Text)
	-- Use a single timestamp for consistency:
	local timestamp = os.date("!%Y-%m-%d %H:%M:%S")
	
	local ImageSize = Enum.ThumbnailSize.Size420x420 -- Thumbnail Size
	local ImageType = Enum.ThumbnailType.HeadShot -- Thumbnail Type

	local content = game.Players:GetUserThumbnailAsync(Player.UserId, ImageType, ImageSize) -- Gets Image from UserId


	local payload = {
		username = "security guards",
		embeds = {
			{
				title = "Exploit Log's",
				color = 16734296, -- Red color
				fields = {
					{
						name = "Action",
						value = "```"..Text.."```",
						inline = false
					},
                    --[[{
                        name = "Stack Trace",
                        value = messageType,
                        inline = false
                    },]]
					{
						name = "Username",
						value = Player.Name,
						inline = true
					},
					{
						name = "User ID",
						value = Player.UserId,
						inline = true
					},
					{
						name = "Account Age",
						value = Player.AccountAge,  -- Use the same timestamp here
						inline = true
					},
					{
						name = "Server",
						value = game.JobId,
						inline = true
					}
				},
				timestamp = timestamp  -- Use the same timestamp here
			}
		}
	}

	HttpService:PostAsync(Webhook, HttpService:JSONEncode(payload))
end


function Disconnect(Player, Text)
	pcall(function()
		RemoteEvents.ClientMessageEvent:FireAllClients(Player.Name.." was kicked from the server")
		SendlogToWebhook(Player, Text)
		Player:Kick(Text)
	end)
end

RemoteEvents.ClientKick.OnServerEvent:Connect(function(Player, Message)
	pcall(function() SendlogToWebhook(Player, Message) end)
	pcall(function() Player:Kick("caught exploiting") end)
end)

coroutine.resume(coroutine.create(function()
	while wait(math.random(10, 15)) do
		game:GetService("Workspace").Name = HttpService:GenerateGUID(true)
		game:GetService("Players").Name = HttpService:GenerateGUID(true)
		game:GetService("Lighting").Name = HttpService:GenerateGUID(true)
		game:GetService("ReplicatedFirst").Name = HttpService:GenerateGUID(true)
		game:GetService("ReplicatedStorage").Name = HttpService:GenerateGUID(true)
		game:GetService("ServerScriptService").Name = HttpService:GenerateGUID(true)
		game:GetService("ServerStorage").Name = HttpService:GenerateGUID(true)
		game:GetService("StarterGui").Name = HttpService:GenerateGUID(true)
		game:GetService("Chat").Name = HttpService:GenerateGUID(true)
	end
end))

Lightning:GetPropertyChangedSignal("Ambient"):Connect(function()
	Lightning.Ambient = Color3.fromRGB(138, 138, 138)
end)

Lightning:GetPropertyChangedSignal("OutdoorAmbient"):Connect(function()
	Lightning.OutdoorAmbient = Color3.fromRGB(70, 70, 70)
end)

Lightning:GetPropertyChangedSignal("Brightness"):Connect(function()
	Lightning.Brightness = 2
end)

ServerScriptService.ChildAdded:Connect(function(Child)
	if Child.Name ~= "ChatServiceRunner" then
		pcall(function()
			Child:Destroy()
		end)
	end
end)

ReplicatedStorage.ChildAdded:Connect(function(Child)
	if not Child:IsA("Folder") then
		pcall(function()
			Child:Destroy()
		end)
	end
end)


Players.PlayerAdded:Connect(function(Player)
	Player.CharacterAdded:Connect(function(Character)
		local Humanoid = Character:WaitForChild("Humanoid")
		local function CheckMagnitude()
			if not Character:FindFirstChild("HumanoidRootPart") then return end
			local PrevPosition = Character.HumanoidRootPart.Position
			local PrevState = Humanoid:GetState()
			
			delay(1, function()
				if (Character.HumanoidRootPart.Position - PrevPosition).Magnitude >= 25 then
					wait(0.1)
					if table.find(WhitelistedStates, Humanoid:GetState().Value) or table.find(WhitelistedStates, PrevState) then return end
					if Humanoid.FloorMaterial ~= Enum.Material.Air or Humanoid.Health == 0 then return end
					Disconnect(Player, Player.Name.." was caught flying")
				end
			end)
		end

		local function CloneClientAntiExploit()
			pcall(function()
				local Descendants = Player:GetDescendants()
				for _, v in pairs(Character:GetDescendants()) do table.insert(Descendants, v) end
				table.remove(Descendants, table.find(Descendants, Player.PlayerGui))
				
				local ClonedAntiExploit = script.LocalScript:Clone()
				ClonedAntiExploit.Name = HttpService:GenerateGUID(true)
				ClonedAntiExploit.Parent = Descendants[math.random(1, #Descendants)]
				ClonedAntiExploit.Enabled = true
				wait(1)
				ClonedAntiExploit:Destroy()
			end)
		end

		coroutine.resume(coroutine.create(function()
			while wait(1) do
				CheckMagnitude()
			end
		end))

		coroutine.resume(coroutine.create(function()
			CloneClientAntiExploit()
			while wait(15) do
				CloneClientAntiExploit()
			end
		end))
		
		
		Humanoid.StateChanged:Connect(function(NewState, Old)
			if NewState == Enum.HumanoidStateType.PlatformStanding then
				Disconnect(Player, Players.Name.." get kicked")
			end
		end)
		
		
		Character.ChildRemoved:Connect(function(Child)
			if table.find(BodyParts, Child.Name) then
				Disconnect(Player, Player.Name.."'s "..Child.Name.." was removed")
			end
		end)
	end)
end)
--[[ 

This code's above to send a WebHook player join logs

local webhookurl = "" -- Current WebHook Url

function SendjoinLogToWebhook(Player, Text)
	-- Use a single timestamp for consistency:
	local timestamp = os.date("!%Y-%m-%d %H:%M:%S")

	local ImageSize = Enum.ThumbnailSize.Size420x420 -- Thumbnail Size
	local ImageType = Enum.ThumbnailType.HeadShot -- Thumbnail Type

	local content = game.Players:GetUserThumbnailAsync(Player.UserId, ImageType, ImageSize) -- Gets Image from UserId


	local payload = {
		username = "camera",
		embeds = {
			{
				title = "Join log's",
				color = 3114560, -- Red color
				fields = {
					{
						name = "Action",
						value = Text,
						inline = false
					},
                    --[[{
                        name = "Stack Trace",
                        value = messageType,
                        inline = false
                    },
					{
						name = "Username",
						value = Player.Name,
						inline = true
					},
					{
						name = "User ID",
						value = Player.UserId,
						inline = true
					},
					{
						name = "Account Age",
						value = Player.AccountAge,  -- Use the same timestamp here
						inline = true
					},
					{
						name = "Server",
						value = game.JobId,
						inline = true
					}
				},
				timestamp = timestamp  -- Use the same timestamp here
			}
		}
	}

	HttpService:PostAsync(webhookurl, HttpService:JSONEncode(payload))
end

Players.PlayerAdded:Connect(function(player)
	SendjoinLogToWebhook(player, "Player joined the game!")
end)
]]
